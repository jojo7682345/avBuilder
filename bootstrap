#if(false) /* BOOTSTRAP_CIRCUIT */
#!/bin/sh
echo compiling bootstrap mechanism
mkdir .bootstrap
cd .bootstrap
self=$(basename "$0")
gcc -o tmp -x c ../$self
echo compiled bootstrap mechanism
echo bootstrapping
./tmp $@
ret=$?
if [ $ret == 0 ]; then
    echo boostrapping successfull
else
    echo bootstrapping failed
fi
rm tmp
cd ..
rm -d -r .bootstrap
exit $ret
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <limits.h>
#include "lib/AvUtils/include/AvUtils/avTypes.h"

#ifndef _WIN32
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/time.h>    
#else
#include <windows.h>
#include <io.h>
#endif

#define CC "gcc"
#define CFLAGS "-std=c11 -Wall -ggdb -fPIC -lm"
#define INCLUDES "include"
#define PROGRAM "avBuilder"

typedef struct File {
    const char* output;
    const char* source;
} File;

#define SOURCE_FILE(dir, file) (File){ file ".o", dir "/" file ".c" }

int compileFile(File file, unsigned int index, unsigned int max) {
    char buffer[2048] = { 0 };
    sprintf(buffer, "%s %s -c -o .bootstrap/%s %s -Iinclude -Ilib/AvUtils/include", CC, CFLAGS, file.output, file.source);
    printf("[%u/%u] compiling %s\n", index, max, file.source);
    int result = system(buffer);
    return result;
}

int linkFile(const char* output, unsigned int fileCount, const File files[], unsigned int index, unsigned int max){
    char buffer[2048] = { 0 };
    char objects[4096] = { 0 };
    
    int offset = 0;
    for(uint32 i = 0; i < fileCount; i++){
        offset += sprintf(objects + offset, ".bootstrap/%s ", files[i].output);
    }

    sprintf(buffer, "%s %s -o %s %s", CC, CFLAGS, output, objects);
    printf("[%u/%u] linking %s\n", index, max, output);
    int result = system(buffer);
    return result;
}

int install(const char* installDir){
    char buffer[2048] = { 0 };
    sprintf(buffer, "install -Dm775 -s "PROGRAM" %s", installDir);
    return system(buffer);
}


#ifndef _WIN32
int run(int argC, char* argV[]){
    pid_t my_pid = 0;
    int status = 0, timeout = 0;
    
    struct timeval t1, t2;
    gettimeofday(&t1, NULL);

    if(0 == (my_pid = fork())){
        
        if(-1 == execv(argV[0],argV)){
            perror("running failed [%m]");
            return -1;
        }
    }

    timeout = 100;
    
    while (0 == waitpid(my_pid , &status , WNOHANG)) {
        gettimeofday(&t2, NULL);

        if((t2.tv_sec - t1.tv_sec) >= timeout){
            perror("timeout");
            return -1;
        }         
        usleep(1000);
    }

    if (1 != WIFEXITED(status) || 0 != WEXITSTATUS(status)) {
        perror("failed, halt system");
        return -1;
    }
    return 0;
}
#else

static LPSTR GetLastErrorAsString(void) {

    DWORD errorMessageId = GetLastError();

    LPSTR messageBuffer = NULL;

    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, // DWORD   dwFlags,
        NULL, // LPCVOID lpSource,
        errorMessageId, // DWORD   dwMessageId,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // DWORD   dwLanguageId,
        (LPSTR)&messageBuffer, // LPTSTR  lpBuffer,
        0, // DWORD   nSize,
        NULL // va_list *Arguments
    );

    return messageBuffer;
}

int run(int argC, char* argV[]){
    STARTUPINFO siStartInfo;
    PROCESS_INFORMATION piProcInfo;

    uint64 len = 0;
    for(int i = 0; i < argC; i++){
        len += strlen(argV[i])+1;
    }
    char* buffer = malloc(len);
    uint64 wOffset = 0;
    for(int i = 0; i < argC; i++){
        strcpy(buffer + wOffset, argV[i]);
        wOffset += strlen(argV[i])+1;
    }
    buffer[len-1] = '\0';

    int bSuccess = CreateProcessA(
        NULL,
        (char*)buffer,
        NULL,
        NULL, 
        TRUE,
        0,
        NULL,
        NULL,
        (LPSTARTUPINFOA)&siStartInfo,
        &piProcInfo
    );
    if (!bSuccess) {
        printf("Could not create child process %s: %s\n",
            buffer, GetLastErrorAsString());
        return false;
    }

    CloseHandle(piProcInfo.hThread);

    DWORD result = WaitForSingleObject(
        (HANDLE)piProcInfo.hProcess,     // HANDLE hHandle,
        INFINITE // DWORD  dwMilliseconds
    );

    if (result == WAIT_FAILED) {
        //TODO: add logging
        printf("could not wait on child process: %s", GetLastErrorAsString());
        return false;
    }
    DWORD exitStatus = 0;
    if (GetExitCodeProcess((HANDLE)piProcInfo.hProcess, (LPDWORD)&exitStatus) == 0) {
        printf("could not get process exit code: %lu", GetLastError());
        return false;
    }

    CloseHandle((HANDLE)piProcInfo.hProcess);
    return true;

}
#endif

int main(int argC, char* argV[]) {
    chdir("..");

    if(argC==3 && strcmp(argV[1], "install")==0){
        return install(argV[2]);
    }
    
    bool32 failed = false;
    const File bootstrapFiles[] = {
        SOURCE_FILE("lib/AvUtils/src/threading",        "avThread"),
        SOURCE_FILE("lib/AvUtils/src/threading",        "avMutex"),
        SOURCE_FILE("lib/AvUtils/src/memory",           "avMemory"),
        SOURCE_FILE("lib/AvUtils/src/processes",        "avProcess"),
        SOURCE_FILE("lib/AvUtils/src/processes",        "avPipe"),
        SOURCE_FILE("lib/AvUtils/src/logging",          "avAssert"),
        SOURCE_FILE("lib/AvUtils/src/dataStructures",   "avDynamicArray"),
        SOURCE_FILE("lib/AvUtils/src/dataStructures",   "avArray"),
        SOURCE_FILE("lib/AvUtils/src/string",           "avChar"),
        SOURCE_FILE("lib/AvUtils/src/string",           "avString"),
        SOURCE_FILE("lib/AvUtils/src/filesystem",       "avFile"),
        SOURCE_FILE("lib/AvUtils/src/filesystem",       "avDirectoryV2"),
        SOURCE_FILE("lib/AvUtils/src/string",           "avPrintf"),
        SOURCE_FILE("lib/AvUtils/src/memory",           "avAllocator"),
        SOURCE_FILE("lib/AvUtils/src/memory",           "avDynamicAllocator"),
        SOURCE_FILE("lib/AvUtils/src/memory",           "avLinearAllocator"),
        SOURCE_FILE("lib/AvUtils/src/dataStructures",   "avStream"),
        SOURCE_FILE("lib/AvUtils/src/environment",      "avEnvironment"),
        SOURCE_FILE("src/AvBuilder",                            "avProjectLoader"),
        SOURCE_FILE("src/AvBuilder",                            "avProjectTokenizer"),
        SOURCE_FILE("src/AvBuilder",                            "avProjectParser"),
        SOURCE_FILE("src/AvBuilder",                            "avProjectProcessor"),
        SOURCE_FILE("src/AvBuilder",                            "avProjectRunner"),
        SOURCE_FILE("src/AvBuilder/builtIn",                    "avBuilderBuiltIn"),
        SOURCE_FILE("src/AvBuilder",                            "avBuilder"),
    };
    const uint32 bootstrapFilesCount = sizeof(bootstrapFiles)/sizeof(File);
    for(uint32 i = 0; i < bootstrapFilesCount; i++){
        if(compileFile(bootstrapFiles[i],i+1,bootstrapFilesCount+1)!=0){
            failed = true;
        }
    }
    if(linkFile(PROGRAM, bootstrapFilesCount, bootstrapFiles, bootstrapFilesCount+1, bootstrapFilesCount + 1)!=0){
        failed = true;
    }

    if(failed){
        return failed;
    }

    if(argC < 2){
        return 0;
    }

    if(strcmp(argV[1],"run")!=0){
        printf("only \'run\' supported\n");
        return -1;
    }

    argV[1] = "./avBuilder" 
#ifdef _WIN32
        ".exe";
#endif
    return run(argC-1, argV + 1);

}

